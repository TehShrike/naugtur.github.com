<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Naugtur's scribbles</title>
    <atom:link href="http://naugtur.pl/writes/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://naugtur.pl/writes</link>
    <description></description>
    <pubDate>Fri, 01 Sep 2017 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Finding blocking operations with Async Hooks</title>
      <link>http://naugtur.pl/writes/writes/articles/blocked-at/</link>
      <pubDate>Fri, 01 Sep 2017 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/blocked-at/</guid>
      <author></author>
      <description>&lt;p&gt;Node.js introduced Async Hooks in version 8 and I could finally do what I always wanted - make a tool to tell me what is blocking the event loop.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;Let’s start with stating the obvious - Node.js programs are asynchronous and it’s for a reason. That reason is called &lt;em&gt;event loop&lt;/em&gt; and if it’s not a familiar word yet, read up on single threaded asynchronous nature of Node.js - it’s great.&lt;/p&gt;
&lt;p&gt;I’ll continue with the assumption that running long synchronous operations in Node.js is something you want to avoid.&lt;/p&gt;
&lt;h2 id=&quot;detecting-blocked-state&quot;&gt;Detecting blocked state&lt;/h2&gt;
&lt;p&gt;In early days of Node, the only way to detect a function blocking the event loop was to notice your server stops accepting new requests for a while. Or use the &lt;a href=&quot;https://www.npmjs.com/package/blocked&quot;&gt;&lt;code&gt;blocked&lt;/code&gt;&lt;/a&gt; package, which uses a neat hack for detecting blockage by (and I’m simplifying) measuring how late a &lt;code&gt;setTimeout&lt;/code&gt; callback is compared to when it should have been called.&lt;/p&gt;
&lt;p&gt;There’s other ways to determine where a lot of CPU cycles are spent. You can use flame grapths but if your code blocks very rarely, the technique might not be helpful unless you know how to reproduce the issue in a narrow window of time.&lt;/p&gt;
&lt;p&gt;Here’s where &lt;a href=&quot;https://nodejs.org/api/async_hooks.html&quot;&gt;Async Hooks&lt;/a&gt; come in.&lt;/p&gt;
&lt;h2 id=&quot;async-hooks-new-possibilities&quot;&gt;Async Hooks - new possibilities&lt;/h2&gt;
&lt;p&gt;Their main purpose is to allow diagnosing asynchronous workflows in general and their first use case was creating an asynchronous stack trace. With &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; hooks I was able to measure the time taken and the &lt;code&gt;init&lt;/code&gt; hook is where a stack trace can be saved. That’s effectively the whole idea behind &lt;a href=&quot;https://www.npmjs.com/package/blocked-at&quot;&gt;&lt;code&gt;blocked-at&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;I made sure it’s similar to the original one, so it’s easy to switch.
Once you run it, you’ll want to analyze the stack traces it collects.&lt;/p&gt;
&lt;h2 id=&quot;finding-the-bug&quot;&gt;Finding the bug&lt;/h2&gt;
&lt;p&gt;Let’s look at an example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;at Promise.then (&amp;lt;anonymous&amp;gt;)
  at Immediate.start (/.../blocked-at/test/cases/promise.js:8:6)
  at runCallback (timers.js:781:20)
  at tryOnImmediate (timers.js:743:5)
  at processImmediate [as _immediateCallback] (timers.js:714:5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s a stack trace from a test case in the unit tests for &lt;code&gt;blocked-at&lt;/code&gt;. It demonstrates what you’ll get if you’re using promises and a &lt;code&gt;.then&lt;/code&gt; handler is synchronously running a long operation.&lt;/p&gt;
&lt;p&gt;Now compare with the code which produced this stack trace.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;meta&quot;&gt;'use strict'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; slow = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'../slowfunc'&lt;/span&gt;)

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; a++)
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; [a])
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
      a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
      slow()
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a
    })
    .catch(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how &lt;code&gt;blocked-at&lt;/code&gt; told us that the offending line is &lt;code&gt;.then(a =&amp;gt; {&lt;/code&gt;. It’s the beginning of the function containing the actual blocking operation somewhere inside &lt;code&gt;slow()&lt;/code&gt; function call.&lt;/p&gt;
&lt;p&gt;To successfully debug your eventloop blocking code you need to start in the reported line and review all synchronous operations going through function execution while ignoring anything that’s in a callback or .then etc.&lt;/p&gt;
&lt;h2 id=&quot;when-stack-trace-is-not-enough&quot;&gt;When stack trace is not enough&lt;/h2&gt;
&lt;p&gt;Sometimes your code is in a callback you pass somewhere to be called synchronously.
Here’s what &lt;code&gt;blocked-at&lt;/code&gt; would report if slow operation happened in a http handler.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;at Server.connectionListener (_http_server.js:307:10)
  at emitOne (events.js:115:13)
  at Server.emit (events.js:210:7)
  at TCP.onconnection (net.js:1560:8)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you see a case like that, all hope is not lost. You have a hint about what kind of asynchronous beginning there was. You can now wrap contents of your handler function in a &lt;code&gt;setImmediate&lt;/code&gt; to get a stack trace from within your codebase.&lt;/p&gt;
&lt;h2 id=&quot;share-your-stack-trace-&quot;&gt;Share your stack trace!&lt;/h2&gt;
&lt;p&gt;I’m hoping to collect more real-life examples of stack traces and build a knowledge base of the less obvious ones.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Share your stack traces from blocked-at in &lt;a href=&quot;https://github.com/naugtur/blocked-at/issues/5&quot;&gt;this github issue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>What if we're overestimating AI again?</title>
      <link>http://naugtur.pl/writes/writes/articles/what-if-were-overestimating-ai-again/</link>
      <pubDate>Mon, 06 Mar 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/what-if-were-overestimating-ai-again/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;I wanted the title to say NLP not AI, but Natural Language Processing is not the first meaning of NLP anymore :/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi. I’m European. If you want to learn something about cultural differences I’ll teach you one thing today. People from Central Europe are not famous for being optimistic.&lt;/p&gt;
&lt;h2 id=&quot;the-hype-s-&quot;&gt;The Hype(s)&lt;/h2&gt;
&lt;p&gt;The first hype around machines and language I know of was when a demo of speech synthesizer was first presented to general public. There’s a great episode of &lt;a href=&quot;http://99percentinvisible.org/episode/vox-ex-machina/&quot;&gt;99% Invisible podcast&lt;/a&gt; detailing that.&lt;/p&gt;
&lt;p&gt;Now guess when was the first time a machine spoke words that were not pre-recorded.&lt;/p&gt;
&lt;p&gt;At the New York World’s Fair in 1939 Bell Labs presented “Voder” - short for “Voice Operating Demonstrator.” It was just few months before the Second World War.&lt;/p&gt;
&lt;p&gt;Everyone was amazed. And while the technology behind it was later used to digitize voice and is still pretty important, people did not get their personal assistant robots to chat with.&lt;/p&gt;
&lt;p&gt;The next great hype around NLP, off the top of my head, was &lt;a href=&quot;https://en.wikipedia.org/wiki/ELIZA&quot;&gt;ELIZA&lt;/a&gt;, a chat bot from 1966. It pretended to be a psychotherapist by scanning each sentence you type and figuring out how to ask another question so that it seems on-topic. Everyone thought passing the Turing test is right around the corner. 50 years later, and chatbots still have trouble getting their act together. Well, maybe ELIZA should have become the therapist for &lt;a href=&quot;http://www.theverge.com/2016/3/24/11297050/tay-microsoft-chatbot-racist&quot;&gt;Microsoft’s Tay&lt;/a&gt;. It could turn out more entertaining than watching &lt;a href=&quot;http://www.ctvnews.ca/sci-tech/we-love-each-other-millions-tune-in-to-watch-two-robots-discuss-life-flirt-1.3231589&quot;&gt;SeeBotsChat&lt;/a&gt; on &lt;a href=&quot;https://www.twitch.tv/seebotschat&quot;&gt;Twitch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sorry for the fast-forward, but from a layman’s perspective the industry has made insignificant progress until just recently.&lt;/p&gt;
&lt;p&gt;Most of the advancement in chatbots between 1966 and 2006 was a result of careful human labor, still echoed by pre-programmed goodies we tend to enjoy most. &lt;a href=&quot;http://www.cheatsheet.com/gear-style/20-questions-to-ask-siri-for-a-hilarious-response.html/?a=viewall&quot;&gt;cheatsheet: questions to ask Siri&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s a long way to go from parsing a sentence to understanding it in context.
The only way to do that known to our civilization is being human. Language is key to the definition of being human (or sentient life as we discover language capacity in animals).&lt;/p&gt;
&lt;h2 id=&quot;language-is-a-human-thing&quot;&gt;Language is a human thing&lt;/h2&gt;
&lt;p&gt;My first job was at a company doing machine translation. It was a while before Google Translate came and destroyed the market. We had a demo plugged into the website, where you could translate 250 characters of text between various languages for free. I added monitoring of inputs and outputs so we could use sentences from random people to identify common errors and fix them.&lt;/p&gt;
&lt;p&gt;I remember looking at the logs once and noticing something weird. They didn’t look like random logs, they looked like a conversation. Moments later, I understood what I’m looking at. A guy was chatting with a girl and they didn’t know each other’s languages. He copied each line she posted in Russian and translated it to Polish. Then he wrote a response and translated the other way around. I went home with a nice anecdote. The next day I looked at the logs and they were still there. Forging a relationship.&lt;/p&gt;
&lt;p&gt;Also, good thing our translator knew some medical terms, if you know what I mean. I decided to give them some privacy and turned off the logs.&lt;/p&gt;
&lt;p&gt;The translation was pretty good compared to what Google initially offered. In other words, translation quality ranged from “weird but I can guess what it meant” to “entirely wrong”. That didn’t stop humans who wanted a relationship.&lt;/p&gt;
&lt;p&gt;What I want to say here is - natural language processing technology, even imperfect, will affect people’s lives in ways you don’t expect.&lt;/p&gt;
&lt;h2 id=&quot;and-now&quot;&gt;And now&lt;/h2&gt;
&lt;p&gt;The new hype is here. One can talk to machines and give commands. Provided that they start with the right safeword. Also, if you know someone who has an oldschool answering machine and Alexa in the same room &lt;a href=&quot;http://www.theregister.co.uk/2017/01/07/tv_anchor_says_alexa_buy_me_a_dollhouse_and_she_does/&quot;&gt;buy them something nice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These machines don’t understand the context and can’t tell if you were meaning or even supposed to talk to them. But that’s ok.&lt;/p&gt;
&lt;p&gt;If you worked at a startup you know what happens when technology meets reality. MVP, scaling, pivots, product/market fit, move fast and break things. In other words - there will be limitations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear customer, if you want to be understood by our product, please use the following grammar structures and limit your vocabulary to avoid archaic phrases. Also, remember our product does not understand metaphors nor sarcasm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now this is where I get anxious.&lt;/p&gt;
&lt;p&gt;Claims that language is deteriorating have been made &lt;a href=&quot;https://www.princeton.edu/~browning/decline.html&quot;&gt;for centuries&lt;/a&gt; but what if this time degrading language can really happen? It’s not what it used to be with language adapting to new generations. Unless you’re willing to consider machines the new generation of humanity. I’m not ready to do that.&lt;/p&gt;
&lt;p&gt;And remember, English is always the most polished case for NLP. What about all those languages that are harder? What about those languages that wouldn’t pay off? Are we ready to loose the language diversity of the World to get a new fancy hands-free communication device to the market early? Do we even have a say?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linguistic_relativity&quot;&gt;Linguistic Relativity&lt;/a&gt; no longer claims language determines thinking entirely, but there is modern research into specific areas where language influences thought. Let’s hope we don’t implement 1984 Orwell’s “newspeak” to limit what we &lt;em&gt;can&lt;/em&gt; think.&lt;/p&gt;
&lt;p&gt;Language processing technology is going mainstream and nothing can stop it now.
We have no clue how it’s going to affect our lives. But it will. A lot.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Dear reader. If you’re working on some AI for conversational interfaces, I hope you can share my concerns now.  We are the generation that makes the choice between keeping and loosing the beautiful mess of human languages. You are one of the very few people who have a vote.&lt;/p&gt;
&lt;p&gt;Let’s make it count.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;AI is coming. Hope for the best, prepare for the worst.
&lt;img src=&quot;https://i.stack.imgur.com/wkUSC.png&quot; alt=&quot;know your paradoxes&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Escaping Backbone ecosystem</title>
      <link>http://naugtur.pl/writes/writes/articles/escaping-backbone-ecosystem/</link>
      <pubDate>Sun, 05 Mar 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/escaping-backbone-ecosystem/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt; lets you migrate away from Backbone without disrupting the product you’re building&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s some old news: &lt;a href=&quot;https://benmccormick.org/2016/03/07/the-sad-state-of-the-backbone-ecosystem/&quot;&gt;Backbone ecosystem is dead&lt;/a&gt;.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;Backbone helped organize astounding number of web apps in its time. These products are still alive and well, with people maintaining the codebases and companies hiring new talent.&lt;/p&gt;
&lt;p&gt;But with no more updates to core pieces of ecosystem, paradigm shift in front-end and community interests driven away, keeping a Backbone project productive and hiring new people to work on it becomes a serious challenge.&lt;/p&gt;
&lt;p&gt;Some time in 2015 there was a very promising trend for using mixins to connect React as view layer for Backbone apps. Some time later it seemed like a dead end. I’ve been thinking about that again recently and when a colleague form work asked for help after getting himself in such a dead end, I happened to be in the right state of mind to find a way out.&lt;/p&gt;
&lt;p&gt;I’ve built a tool: &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It lets a Redux app exist inside of a Backbone project and slowly take over.
It’s optimized for keeping total separation between codebases, so that they only exchange information via the migrator or &lt;code&gt;window.location&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main idea behind the tool is to let Redux codebase grow without creating dependencies on old code. Backbone architecture requires it to hold on to routing, so even when you use full Redux stack in a rewritten functionality, routing is still done by Backbone side. The great thing that backbone-redux-migrator is helping you achieve is complete functionality migration to Redux with all elements of the stack available. Once Redux app consumes all the functionalities necessary, all you need to do is remove Backbone and configure routing.&lt;/p&gt;
&lt;p&gt;I’ve tested this solution on a real life project my colleague was maintaining and it became easy for him to start rewriting functionalities to Redux without breaking the app. He could decide which functionalities he’s ready to rewrite and which need to stay in Backbone to not affect the release timeline. Also, it prevented him from trying to use events from Backbone in components etc.&lt;/p&gt;
&lt;p&gt;Correct me if I’m wrong, but this seems like the only migration path freeing the project from its Backbone legacy without disruption that isn’t introducing dependencies on Backbone to Redux logic.&lt;/p&gt;
&lt;p&gt;I’m hoping this reaches everyone who’s dealing with maintaining a Backbone project in 2017.&lt;/p&gt;
&lt;p&gt;Feel free to contact me for advice if the readme isn’t enough.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chaos Monkey for PM2</title>
      <link>http://naugtur.pl/writes/writes/articles/chaos-monkey-for-pm2/</link>
      <pubDate>Thu, 23 Feb 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/chaos-monkey-for-pm2/</guid>
      <author></author>
      <description>&lt;p&gt;The term Chaos Monkey was coined by Netflix - it’s a tool that kills your production machines at random.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/netflix/chaosmonkey&quot;&gt;See their repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Surprised? Well, that’s how they got developers to think about making the services available no matter what happens.
You can’t dismiss any failure as unlikely anymore. There’s a monkey in your server room. Even if it’s entirely virtual.&lt;/p&gt;
&lt;p&gt;I needed this concept recently for testing failover of workers running as processes on &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s a tiny script I came up with&lt;/p&gt;
&lt;h3 id=&quot;minimum-viable-chaos-monkey&quot;&gt;Minimum Viable Chaos Monkey&lt;/h3&gt;
&lt;p&gt;Just give it the name of your app as &lt;code&gt;$APP&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;#choose one of the delays randomly and wait&lt;/span&gt;
  shuf -n1 &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; 30 60 120 | xargs sleep
  &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;chaos monkey strikes!&quot;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;#choose one random app process and restart it&lt;/span&gt;
  pm2 id &lt;span class=&quot;variable&quot;&gt;$APP&lt;/span&gt; | egrep -o &lt;span class=&quot;string&quot;&gt;&quot;[0-9]+&quot;&lt;/span&gt; | xargs shuf -n1 &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; | xargs pm2 restart
&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cute, huh?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Panel dyskusyjny React vs Angular</title>
      <link>http://naugtur.pl/writes/writes/articles/nagranie-react-vs-angular/</link>
      <pubDate>Tue, 06 Sep 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/nagranie-react-vs-angular/</guid>
      <author></author>
      <description>&lt;p&gt;Po miesiącach wytężonej pracy i ciągłego przekładania na później, oddaję w wasze ręce… uszy? słuchawki? nagranie z panelu dyskusyjnego Rect vs Angular, który miałem okazję moderować w lutym tego roku.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Nagranie nie jest idealne, ale odszumiłem je jak tylko mogłem. Odgłosy pisania na klawiaturze musicie wybaczyć Sebastianowi :) - gdyby nie on, nie byłoby nagrania!&lt;/p&gt;
&lt;p&gt;Podziękowania dla panelistów i organizatorów!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;audio-do-pobrania&quot;&gt;Audio do pobrania&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nagranie podzielone na rozdziały &lt;a href=&quot;https://naugtur.egnyte.com/fl/eSdMCRoEOs/React-vs-Angular&quot;&gt;Otwórz folder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Całe nagranie w jendym pliku &lt;a href=&quot;https://naugtur.egnyte.com/dl/LSFvNmx0B6/React-vs-Angular.mp3&quot;&gt;Pobierz plik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;linki&quot;&gt;Linki&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/events/160251467665280&quot;&gt;Event z lutego&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://events.pozoga.eu&quot;&gt;Autor nagrania&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://naugtur.pl/news&quot;&gt;Zapisz się do newslettera po więcej&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;licencja&quot;&gt;Licencja&lt;/h2&gt;
&lt;p&gt;Creative Commons Attribution Non-commercial&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://creativecommons.org/licenses/by-nc/3.0/&quot;&gt;https://creativecommons.org/licenses/by-nc/3.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Czyli jeśli podajesz dalej, to napisz skąd masz i nie zarabiaj na tym.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Everything is an array index</title>
      <link>http://naugtur.pl/writes/writes/articles/everything-is-an-array-index/</link>
      <pubDate>Wed, 13 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/everything-is-an-array-index/</guid>
      <author></author>
      <description>&lt;p&gt;Javascript engines never cease to amuse me.
Let’s look at our good old &lt;code&gt;Array.prototype.splice&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//returns [1]&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//returns [2]&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 2!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, so splice is accepting non-numbers and it’s casting them to booleans and then to numbers, right? Wrong.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confused? That’s still pretty consistent!
Check this out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go home javascript, you’re drunk.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;let-s-figure-this-out-anyway-&quot;&gt;Let’s figure this out anyway.&lt;/h3&gt;
&lt;p&gt;First:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2one&quot;&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, that’s something. Looks like it casts stuff to string and expects it to be a number, then if NaN, assumes 0.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=[];
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(a,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//returns [ 1 ]&lt;/span&gt;
a.toString=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;}
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(a,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//returns [ 3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confirmed.
But what about true ?&lt;/p&gt;
&lt;p&gt;Well, it turns out there’s one more step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;}}) === &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;({}) &lt;span class=&quot;comment&quot;&gt;//is NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, finally, the closest thing to what &lt;code&gt;Array.prototype.splice&lt;/code&gt; does to its arguments is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;~~&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(arg)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Cast to number&lt;/li&gt;
&lt;li&gt;If input is not a primitive type, &lt;code&gt;Number()&lt;/code&gt; will call &lt;code&gt;.toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Force-cast to integer (emulated here by &lt;code&gt;~~&lt;/code&gt;) so all &lt;code&gt;NaN&lt;/code&gt; results become &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now if that’s not a work of art, I don’t know what is. :)&lt;/p&gt;
&lt;p&gt;All return values come from V8 as present in node v0.10.37&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>