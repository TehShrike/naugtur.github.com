<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Naugtur's scribbles</title>
    <atom:link href="http://naugtur.pl/writes/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://naugtur.pl/writes</link>
    <description></description>
    <pubDate>Sun, 05 Mar 2017 01:00:00 +0100</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Escaping Backbone ecosystem</title>
      <link>http://naugtur.pl/writes/writes/articles/escaping-backbone-ecosystem/</link>
      <pubDate>Sun, 05 Mar 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/escaping-backbone-ecosystem/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt; lets you migrate away from Backbone without disrupting the product you’re building&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s some old news: &lt;a href=&quot;https://benmccormick.org/2016/03/07/the-sad-state-of-the-backbone-ecosystem/&quot;&gt;Backbone ecosystem is dead&lt;/a&gt;.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;Backbone helped organize astounding number of web apps in its time. These products are still alive and well, with people maintaining the codebases and companies hiring new talent.&lt;/p&gt;
&lt;p&gt;But with no more updates to core pieces of ecosystem, paradigm shift in front-end and community interests driven away, keeping a Backbone project productive and hiring new people to work on it becomes a serious challenge.&lt;/p&gt;
&lt;p&gt;Some time in 2015 there was a very promising trend for using mixins to connect React as view layer for Backbone apps. Some time later it seemed like a dead end. I’ve been thinking about that again recently and when a colleague form work asked for help after getting himself in such a dead end, I happened to be in the right state of mind to find a way out.&lt;/p&gt;
&lt;p&gt;I’ve built a tool: &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It lets a Redux app exist inside of a Backbone project and slowly take over.
It’s optimized for keeping total separation between codebases, so that they only exchange information via the migrator or &lt;code&gt;window.location&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main idea behind the tool is to let Redux codebase grow without creating dependencies on old code. Backbone architecture requires it to hold on to routing, so even when you use full Redux stack in a rewritten functionality, routing is still done by Backbone side. The great thing that backbone-redux-migrator is helping you achieve is complete functionality migration to Redux with all elements of the stack available. Once Redux app consumes all the functionalities necessary, all you need to do is remove Backbone and configure routing.&lt;/p&gt;
&lt;p&gt;I’ve tested this solution on a real life project my colleague was maintaining and it became easy for him to start rewriting functionalities to Redux without breaking the app. He could decide which functionalities he’s ready to rewrite and which need to stay in Backbone to not affect the release timeline. Also, it prevented him from trying to use events from Backbone in components etc.&lt;/p&gt;
&lt;p&gt;Correct me if I’m wrong, but this seems like the only migration path freeing the project from its Backbone legacy without disruption that isn’t introducing dependencies on Backbone to Redux logic.&lt;/p&gt;
&lt;p&gt;I’m hoping this reaches everyone who’s dealing with maintaining a Backbone project in 2017.&lt;/p&gt;
&lt;p&gt;Feel free to contact me for advice if the readme isn’t enough.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chaos Monkey for PM2</title>
      <link>http://naugtur.pl/writes/writes/articles/chaos-monkey-for-pm2/</link>
      <pubDate>Thu, 23 Feb 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/chaos-monkey-for-pm2/</guid>
      <author></author>
      <description>&lt;p&gt;The term Chaos Monkey was coined by Netflix - it’s a tool that kills your production machines at random.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/netflix/chaosmonkey&quot;&gt;See their repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Surprised? Well, that’s how they got developers to think about making the services available no matter what happens.
You can’t dismiss any failure as unlikely anymore. There’s a monkey in your server room. Even if it’s entirely virtual.&lt;/p&gt;
&lt;p&gt;I needed this concept recently for testing failover of workers running as processes on &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s a tiny script I came up with&lt;/p&gt;
&lt;h3 id=&quot;minimum-viable-chaos-monkey&quot;&gt;Minimum Viable Chaos Monkey&lt;/h3&gt;
&lt;p&gt;Just give it the name of your app as &lt;code&gt;$APP&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;#choose one of the delays randomly and wait&lt;/span&gt;
  shuf -n1 &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; 30 60 120 | xargs sleep
  &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;chaos monkey strikes!&quot;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;#choose one random app process and restart it&lt;/span&gt;
  pm2 id &lt;span class=&quot;variable&quot;&gt;$APP&lt;/span&gt; | egrep -o &lt;span class=&quot;string&quot;&gt;&quot;[0-9]+&quot;&lt;/span&gt; | xargs shuf -n1 &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; | xargs pm2 restart
&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cute, huh?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Panel dyskusyjny React vs Angular</title>
      <link>http://naugtur.pl/writes/writes/articles/nagranie-react-vs-angular/</link>
      <pubDate>Tue, 06 Sep 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/nagranie-react-vs-angular/</guid>
      <author></author>
      <description>&lt;p&gt;Po miesiącach wytężonej pracy i ciągłego przekładania na później, oddaję w wasze ręce… uszy? słuchawki? nagranie z panelu dyskusyjnego Rect vs Angular, który miałem okazję moderować w lutym tego roku.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Nagranie nie jest idealne, ale odszumiłem je jak tylko mogłem. Odgłosy pisania na klawiaturze musicie wybaczyć Sebastianowi :) - gdyby nie on, nie byłoby nagrania!&lt;/p&gt;
&lt;p&gt;Podziękowania dla panelistów i organizatorów!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;audio-do-pobrania&quot;&gt;Audio do pobrania&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nagranie podzielone na rozdziały &lt;a href=&quot;https://naugtur.egnyte.com/fl/eSdMCRoEOs/React-vs-Angular&quot;&gt;Otwórz folder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Całe nagranie w jendym pliku &lt;a href=&quot;https://naugtur.egnyte.com/dl/LSFvNmx0B6/React-vs-Angular.mp3&quot;&gt;Pobierz plik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;linki&quot;&gt;Linki&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/events/160251467665280&quot;&gt;Event z lutego&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://events.pozoga.eu&quot;&gt;Autor nagrania&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://naugtur.pl/news&quot;&gt;Zapisz się do newslettera po więcej&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;licencja&quot;&gt;Licencja&lt;/h2&gt;
&lt;p&gt;Creative Commons Attribution Non-commercial&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://creativecommons.org/licenses/by-nc/3.0/&quot;&gt;https://creativecommons.org/licenses/by-nc/3.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Czyli jeśli podajesz dalej, to napisz skąd masz i nie zarabiaj na tym.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Everything is an array index</title>
      <link>http://naugtur.pl/writes/writes/articles/everything-is-an-array-index/</link>
      <pubDate>Wed, 13 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/everything-is-an-array-index/</guid>
      <author></author>
      <description>&lt;p&gt;Javascript engines never cease to amuse me.
Let’s look at our good old &lt;code&gt;Array.prototype.splice&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//returns [1]&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//returns [2]&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 2!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, so splice is accepting non-numbers and it’s casting them to booleans and then to numbers, right? Wrong.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confused? That’s still pretty consistent!
Check this out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go home javascript, you’re drunk.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;let-s-figure-this-out-anyway-&quot;&gt;Let’s figure this out anyway.&lt;/h3&gt;
&lt;p&gt;First:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2one&quot;&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, that’s something. Looks like it casts stuff to string and expects it to be a number, then if NaN, assumes 0.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=[];
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(a,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//returns [ 1 ]&lt;/span&gt;
a.toString=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;}
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(a,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//returns [ 3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confirmed.
But what about true ?&lt;/p&gt;
&lt;p&gt;Well, it turns out there’s one more step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;}}) === &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;({}) &lt;span class=&quot;comment&quot;&gt;//is NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, finally, the closest thing to what &lt;code&gt;Array.prototype.splice&lt;/code&gt; does to its arguments is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;~~&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(arg)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Cast to number&lt;/li&gt;
&lt;li&gt;If input is not a primitive type, &lt;code&gt;Number()&lt;/code&gt; will call &lt;code&gt;.toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Force-cast to integer (emulated here by &lt;code&gt;~~&lt;/code&gt;) so all &lt;code&gt;NaN&lt;/code&gt; results become &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now if that’s not a work of art, I don’t know what is. :)&lt;/p&gt;
&lt;p&gt;All return values come from V8 as present in node v0.10.37&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>